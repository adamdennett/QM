---
title: 'Practical 2: Recognising and plotting probability distributions'
subtitle: ""
format:
  html: default
  ipynb: default
filters:
  - qna
  - quarto
---

This week is focussed on using some common functions in Python to plot data and distributions. 

## Learning Outcomes 

- Familiarise yourself with opening data files in Python. 
- Familiarise yourself with plotting histograms of data in Python. 

# Starting the Practical

As per last week, the process for every week will be the same: download the notebook to your `QM` folder, switch over to `JupyterLab` (which will be running in Podman/Docker) and get to work. If you want to save the completed notebook to your Github repo, you can `add`, `commit`, and `push` the notebook in Git after you download it. When you're done for the day, save your changes to the file (This is very important!), then `add`, `commit`, and `push` your work to save the completed notebook.

## Loading the data 

We are going to look at schools perfomance data in England. 

The data is sourced from []() and is downloadable [here]().

We have saved a copy of this dataset to the Github repo, in case that the dataset is removed from the website.

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np 

# Read CSV file, handling common missing value entries
na_vals = ["", "NA", "SUPP", "NP", "NE", "SP", "SN", "SUPPMAT"]
df_ks4 = pd.read_csv(
    'L2_data/england_ks4final.csv',
    na_values = na_vals
)

info_cols = ['RECTYPE', 'LEA', 'SCHNAME', 'TOTPUPS']
ebaccs_cols = ['EBACCAPS', 'EBACCAPS_LO', 'EBACCAPS_MID', 'EBACCAPS_HI']

df_ks4 = df_ks4[info_cols + ebaccs_cols]

df_ks4[['TOTPUPS']+ebaccs_cols] = df_ks4[['TOTPUPS']+ebaccs_cols].apply(pd.to_numeric, errors='coerce')

df_ks4.head()
```

You might be wondering why I've chosen the columns `info_cols` and `ebaccs_cols`. 

Looking at the metadata (which you can see in 'L2_data/ks4_meta.xlsx') we can see the full meaning of each column header: 

- 'RECTYPE' = Record type (1=mainstream school; 2=special school; 4=local authority; 5=National (all schools); 7=National (maintained schools))
- 'LEA' = Local authority 
- 'SCHNAME' = School name 
- 'TOTPUPS' = Number of pupils on roll (all ages)
- 'EBACCAPS' = Average EBacc APS score per pupil
- 'EBACCAPS_LO' = Average EBacc APS score per pupil with low prior attainment
- 'EBACCAPS_MID' = Average EBacc APS score per pupil with middle prior attainment
- 'EBACCAPS_HI' = Average EBacc APS score per pupil with high prior attainment

The EBacc is a measure of students school grades calculated as an avergae score across a set number of subjects. It is used as a performance indicator of English schools. You can read more about it [here](https://en.wikipedia.org/wiki/English_Baccalaureate#:~:text=Added%20together%2C%20this%20gives%20a,for%20girls%202018%20was%204.33.).

## Describing the dataframe 

### Check how much data is missing 

```{python}
# print how much data is missing for each column
df_ks4.isna().mean() * 100 
```

It seems suspiscious that the school names are missing for some of the entries - let's check these. 

```{python}
# return rows where SCHNAME is missing
df_ks4[df_ks4['SCHNAME'].isna()]
```

So, these are all record type 4, 5, or 7 - i.e. they're not individual schools! Let's limit the selection to only mainstream and special schools. 

```{python}
# only keep rows where RECTYPE is 1 or 2 
df_ks4 = df_ks4[df_ks4['RECTYPE'].isin([1, 2])].copy()
```

Now we can check the data dimensions. 

```{python}
rows, cols = df_ks4.shape
print(f"Rows: {rows}, Columns: {cols}")
```

### Summary statistics 

We can use the `describe` function in pandas to easily get the summary statistics for a dataframe. 

```{python}
numerical_cols = ['TOTPUPS', 'EBACCAPS', 'EBACCAPS_LO', 'EBACCAPS_MID', 'EBACCAPS_HI']

df_ks4[numerical_cols].describe()
```

## Histograms 

Let's try plotting the Average EBacc APS score per pupil. 

```{python}
n_bins = 10
fig, ax = plt.subplots(figsize=(12, 8))

ax.hist(df_ks4['EBACCAPS'].dropna(), bins=n_bins, color='#abc766', edgecolor='black')
ax.set_title('EBacc distribution')
ax.set_xlabel('EBacc score')
ax.set_ylabel('Number of schools')  
ax.set_xlim(0,9) # the EBacc has a maximum score of 9

plt.show()
```

What do you observe from this boxplot? Because the bins are quite large it's difficult to get a sense of the distribution - try changing this to get a better idea of the data spread. 

::: qna
#### Question

``` python
n_bins = ??
fig, ax = plt.subplots(figsize=(12, 8))

ax.hist(df_ks4['EBACCAPS'].dropna(), bins=n_bins, color='#abc766', edgecolor='black')
ax.set_title('EBacc distribution')
ax.set_xlabel('EBacc score')
ax.set_ylabel('Number of schools')  
ax.set_xlim(0,9) # the EBacc has a maximum score of 9

plt.show()
```

#### Answer

```{python}
n_bins = 30
fig, ax = plt.subplots(figsize=(12, 8))

ax.hist(df_ks4['EBACCAPS'].dropna(), bins=n_bins, color='#abc766', edgecolor='black')
ax.set_title('EBacc distribution')
ax.set_xlabel('EBacc score')
ax.set_ylabel('Number of schools')  
ax.set_xlim(0,9) # the EBacc has a maximum score of 9

plt.show()
```
:::

### Is it normally distributed? 

Looking at the histogram does the data look normally distributed? 

Remember the key features of the normal distribution:

- Data is continuous 
  - it is something you measure not something you count
- Data is equally likely to be larger or smaller than average 
  - symmetric
- Characteristic size, all data points are close to the mean 
  - single peak
- There is less data further away from the mean 
  - smooth tails on both sides

One way to consider whether it is normally distributed is to overlay the normal distribution on top.

We can use the package `scipy.stats` which has functions for generating probability density functions for common distributions. You can see which common distributions [here](https://docs.scipy.org/doc/scipy/reference/stats.html).

```{python}
import scipy.stats as sps

# first let's get the mean and stand deviation 
mu = df_ks4['EBACCAPS'].dropna().mean()
std = df_ks4['EBACCAPS'].dropna().std()

## Create the plot 

# plot the histogram
plt.figure(figsize=(12, 8))
plt.hist(df_ks4['EBACCAPS'], bins=30, density=True, color='#abc766', edgecolor='black')

# plot the Probability Density Function (PDF)
xmin = 0 
xmax = 9
x = np.linspace(xmin, xmax, 100)
p = sps.norm.pdf(x, mu, std)
plt.plot(x, p, 'k', linewidth=2, color="#e16fca")

plt.title(f"Fit results: $\mu$ = {mu:.2f},  $\sigma$ = {std:.2f}")
plt.xlim(0, 9)
plt.xlabel("EBacc score")
plt.ylabel("Density")

plt.show()
```

Note that this time we plot the histogram with `density=True` - this scales the histogram data. 


## You're Done!

Congratulations on completing the second QM practical session! If you are still working on it, take your time.

Don’t worry about understanding every detail of the Python code — what matters most is knowing which functions to use for a specific task, like checking minimum and maximum values or generating boxplots, and knowing how to debug when it goes wrong. Remember, practice makes perfect.

