INSTITUTIONS_INMAT = as.character(INSTITUTIONS_INMAT)
)
# Then Identify columns to convert (excluding character columns)
cols_to_convert <- england_ks4_mats_performance |>
select(-(1:10), -P8_BANDING, -INSTITUTIONS_INMAT) |>
names()
# Then apply parse_number safely to convert characters to numbers
england_ks4_mats_performance <- england_ks4_mats_performance |>
mutate(across(all_of(cols_to_convert), ~ parse_number(as.character(.))))
# KS4 pupil destination data
england_ks4_pupdest <- read_csv(file.path(base_path, "england_ks4-pupdest.csv"), na = na_extended) |>
mutate(URN = as.character(URN)) |>
mutate(across(8:82, ~ parse_number(as.character(.))))
# KS4 final attainment data
england_ks4final <- read_csv(file.path(base_path, "england_ks4final.csv"), na = na_attainment) |>
mutate(URN = as.character(URN)) |>
mutate(across(TOTPUPS:PTOTENT_E_COVID_IMPACTED_PTQ_EE, ~ parse_number(as.character(.))))
# School information data
england_school_information <- read_csv(
file.path(base_path, "england_school_information.csv"),
na = na_extended,
col_types = cols(
URN = col_character(),
OFSTEDLASTINSP = col_date(format = "%d-%m-%Y")
)
)
reticulate::repl_python()
#| warning: false
# Left join england_ks4final with england_abs
england_school_2022_23 <- england_ks4final %>%
left_join(england_abs, by = "URN") %>%
left_join(england_census, by = "URN") %>%
left_join(england_school_information, by = "URN")
#| message: false
#| warning: false
#| include: false
# reticulate::py_install("pyyaml")
# reticulate::py_install("jupyter")
# reticulate::py_install("statsmodels")
# reticulate::py_install("pandas")
# reticulate::py_install("numpy")
# reticulate::py_install("pyjanitor")
# reticulate::py_install("pathlib")
reticulate::repl_python()
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
library(readr)
library(dplyr)
library(here)
# Read CSV file
edubase_schools <- read_csv("https://www.dropbox.com/scl/fi/fhzafgt27v30lmmuo084y/edubasealldata20241003.csv?rlkey=uorw43s44hnw5k9js3z0ksuuq&raw=1") %>%
clean_names() %>%
mutate(urn = as.character(urn))
#str(r_edubase_schools)
# Define base path and common NA values - NOTE YOU WILL NEED TO DOWNLOAD THIS DATA AND PUT INTO YOUR OWN base_path LOCATION ON YOUR MACHINE
base_path <- here("sessions", "L6_data", "Performancetables_130242", "2022-2023")
na_common <- c("", "NA", "SUPP", "NP", "NE")
na_extended <- c(na_common, "SP", "SN")
na_attainment <- c(na_extended, "LOWCOV", "NEW")
na_mats <- c(na_common, "SUPPMAT")
# Absence data
england_abs <- read_csv(file.path(base_path, "england_abs.csv"), na = na_common) |>
mutate(URN = as.character(URN))
# Other School Census data
england_census <- read_csv(file.path(base_path, "england_census.csv"), na = na_common) |>
mutate(URN = as.character(URN)) |>
mutate(across(5:23, ~ parse_number(as.character(.))))
# KS4 MATs performance data
#First read
england_ks4_mats_performance <- read_csv(
file.path(base_path, "england_ks4-mats-performance.csv"),
na = na_mats
) |>
mutate(
TRUST_UID = as.character(TRUST_UID),
P8_BANDING = as.character(P8_BANDING),
INSTITUTIONS_INMAT = as.character(INSTITUTIONS_INMAT)
)
# Then Identify columns to convert (excluding character columns)
cols_to_convert <- england_ks4_mats_performance |>
select(-(1:10), -P8_BANDING, -INSTITUTIONS_INMAT) |>
names()
# Then apply parse_number safely to convert characters to numbers
england_ks4_mats_performance <- england_ks4_mats_performance |>
mutate(across(all_of(cols_to_convert), ~ parse_number(as.character(.))))
# KS4 pupil destination data
england_ks4_pupdest <- read_csv(file.path(base_path, "england_ks4-pupdest.csv"), na = na_extended) |>
mutate(URN = as.character(URN)) |>
mutate(across(8:82, ~ parse_number(as.character(.))))
# KS4 final attainment data
england_ks4final <- read_csv(file.path(base_path, "england_ks4final.csv"), na = na_attainment) |>
mutate(URN = as.character(URN)) |>
mutate(across(TOTPUPS:PTOTENT_E_COVID_IMPACTED_PTQ_EE, ~ parse_number(as.character(.))))
# School information data
england_school_information <- read_csv(
file.path(base_path, "england_school_information.csv"),
na = na_extended,
col_types = cols(
URN = col_character(),
OFSTEDLASTINSP = col_date(format = "%d-%m-%Y")
)
)
reticulate::repl_python()
#| warning: false
# Left join england_ks4final with england_abs
england_school_2022_23 <- england_ks4final %>%
left_join(england_abs, by = "URN") %>%
left_join(england_census, by = "URN") %>%
left_join(england_school_information, by = "URN")
#| message: false
#| warning: false
#| include: false
reticulate::py_install("pyyaml")
reticulate::py_install("jupyter")
reticulate::py_install("statsmodels")
reticulate::py_install("pandas")
reticulate::py_install("numpy")
reticulate::py_install("pyjanitor")
reticulate::py_install("pathlib")
#| message: false
#| warning: false
#| include: false
# reticulate::py_install("pyyaml")
# reticulate::py_install("jupyter")
# reticulate::py_install("statsmodels")
# reticulate::py_install("pandas")
# reticulate::py_install("numpy")
# reticulate::py_install("pyjanitor")
# reticulate::py_install("pathlib")
reticulate::repl_python()
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
library(readr)
library(dplyr)
library(here)
# Read CSV file
edubase_schools <- read_csv("https://www.dropbox.com/scl/fi/fhzafgt27v30lmmuo084y/edubasealldata20241003.csv?rlkey=uorw43s44hnw5k9js3z0ksuuq&raw=1") %>%
clean_names() %>%
mutate(urn = as.character(urn))
#str(r_edubase_schools)
# Define base path and common NA values - NOTE YOU WILL NEED TO DOWNLOAD THIS DATA AND PUT INTO YOUR OWN base_path LOCATION ON YOUR MACHINE
base_path <- here("sessions", "L6_data", "Performancetables_130242", "2022-2023")
na_common <- c("", "NA", "SUPP", "NP", "NE")
na_extended <- c(na_common, "SP", "SN")
na_attainment <- c(na_extended, "LOWCOV", "NEW")
na_mats <- c(na_common, "SUPPMAT")
# Absence data
england_abs <- read_csv(file.path(base_path, "england_abs.csv"), na = na_common) |>
mutate(URN = as.character(URN))
# Other School Census data
england_census <- read_csv(file.path(base_path, "england_census.csv"), na = na_common) |>
mutate(URN = as.character(URN)) |>
mutate(across(5:23, ~ parse_number(as.character(.))))
# KS4 MATs performance data
#First read
england_ks4_mats_performance <- read_csv(
file.path(base_path, "england_ks4-mats-performance.csv"),
na = na_mats
) |>
mutate(
TRUST_UID = as.character(TRUST_UID),
P8_BANDING = as.character(P8_BANDING),
INSTITUTIONS_INMAT = as.character(INSTITUTIONS_INMAT)
)
# Then Identify columns to convert (excluding character columns)
cols_to_convert <- england_ks4_mats_performance |>
select(-(1:10), -P8_BANDING, -INSTITUTIONS_INMAT) |>
names()
# Then apply parse_number safely to convert characters to numbers
england_ks4_mats_performance <- england_ks4_mats_performance |>
mutate(across(all_of(cols_to_convert), ~ parse_number(as.character(.))))
# KS4 pupil destination data
england_ks4_pupdest <- read_csv(file.path(base_path, "england_ks4-pupdest.csv"), na = na_extended) |>
mutate(URN = as.character(URN)) |>
mutate(across(8:82, ~ parse_number(as.character(.))))
# KS4 final attainment data
england_ks4final <- read_csv(file.path(base_path, "england_ks4final.csv"), na = na_attainment) |>
mutate(URN = as.character(URN)) |>
mutate(across(TOTPUPS:PTOTENT_E_COVID_IMPACTED_PTQ_EE, ~ parse_number(as.character(.))))
# School information data
england_school_information <- read_csv(
file.path(base_path, "england_school_information.csv"),
na = na_extended,
col_types = cols(
URN = col_character(),
OFSTEDLASTINSP = col_date(format = "%d-%m-%Y")
)
)
reticulate::repl_python()
#| warning: false
# Left join england_ks4final with england_abs
england_school_2022_23 <- england_ks4final %>%
left_join(england_abs, by = "URN") %>%
left_join(england_census, by = "URN") %>%
left_join(england_school_information, by = "URN")
#| message: false
#| warning: false
#| include: false
# reticulate::py_install("pyyaml")
# reticulate::py_install("jupyter")
# reticulate::py_install("statsmodels")
# reticulate::py_install("pandas")
# reticulate::py_install("numpy")
# reticulate::py_install("pyjanitor")
# reticulate::py_install("pathlib")
reticulate::repl_python()
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
library(readr)
library(dplyr)
library(here)
# Read CSV file
edubase_schools <- read_csv("https://www.dropbox.com/scl/fi/fhzafgt27v30lmmuo084y/edubasealldata20241003.csv?rlkey=uorw43s44hnw5k9js3z0ksuuq&raw=1") %>%
clean_names() %>%
mutate(urn = as.character(urn))
#str(r_edubase_schools)
# Define base path and common NA values - NOTE YOU WILL NEED TO DOWNLOAD THIS DATA AND PUT INTO YOUR OWN base_path LOCATION ON YOUR MACHINE
base_path <- here("sessions", "L6_data", "Performancetables_130242", "2022-2023")
na_common <- c("", "NA", "SUPP", "NP", "NE")
na_extended <- c(na_common, "SP", "SN")
na_attainment <- c(na_extended, "LOWCOV", "NEW")
na_mats <- c(na_common, "SUPPMAT")
# Absence data
england_abs <- read_csv(file.path(base_path, "england_abs.csv"), na = na_common) |>
mutate(URN = as.character(URN))
# Other School Census data
england_census <- read_csv(file.path(base_path, "england_census.csv"), na = na_common) |>
mutate(URN = as.character(URN)) |>
mutate(across(5:23, ~ parse_number(as.character(.))))
# KS4 MATs performance data
#First read
england_ks4_mats_performance <- read_csv(
file.path(base_path, "england_ks4-mats-performance.csv"),
na = na_mats
) |>
mutate(
TRUST_UID = as.character(TRUST_UID),
P8_BANDING = as.character(P8_BANDING),
INSTITUTIONS_INMAT = as.character(INSTITUTIONS_INMAT)
)
# Then Identify columns to convert (excluding character columns)
cols_to_convert <- england_ks4_mats_performance |>
select(-(1:10), -P8_BANDING, -INSTITUTIONS_INMAT) |>
names()
# Then apply parse_number safely to convert characters to numbers
england_ks4_mats_performance <- england_ks4_mats_performance |>
mutate(across(all_of(cols_to_convert), ~ parse_number(as.character(.))))
# KS4 pupil destination data
england_ks4_pupdest <- read_csv(file.path(base_path, "england_ks4-pupdest.csv"), na = na_extended) |>
mutate(URN = as.character(URN)) |>
mutate(across(8:82, ~ parse_number(as.character(.))))
# KS4 final attainment data
england_ks4final <- read_csv(file.path(base_path, "england_ks4final.csv"), na = na_attainment) |>
mutate(URN = as.character(URN)) |>
mutate(across(TOTPUPS:PTOTENT_E_COVID_IMPACTED_PTQ_EE, ~ parse_number(as.character(.))))
# School information data
england_school_information <- read_csv(
file.path(base_path, "england_school_information.csv"),
na = na_extended,
col_types = cols(
URN = col_character(),
OFSTEDLASTINSP = col_date(format = "%d-%m-%Y")
)
)
reticulate::repl_python()
reticulate::py_install("pandas")
reticulate::repl_python()
renv::status()
renv::snapshot(prompt = FALSE)
library(reticulate)
reticulate::py_require("pyyaml")
reticulate::py_require("jupyter")
reticulate::py_require("statsmodels")
reticulate::py_require("pandas")
reticulate::py_require("numpy")
reticulate::py_require("pyjanitor")
reticulate::py_require("pathlib")
reticulate::py_require("matplotlib")
reticulate::repl_python()
reticulate::virtualenv_remove("r-reticulate")
Y
reticulate::py_config()
reticulate::use_python("C:/Users/Adam/AppData/Local/R/cache/R/reticulate/uv/cache/archive-v0/EiTNi4omakhlev5ckz2WP/Scripts/python.exe", required = TRUE)
reticulate::py_require("pyyaml")
reticulate::py_require("jupyter")
reticulate::py_require("statsmodels")
reticulate::py_require("pandas")
reticulate::py_require("numpy")
reticulate::py_require("pyjanitor")
reticulate::py_require("pathlib")
reticulate::py_require("matplotlib")
reticulate::repl_python()
Sys.setenv(RETICULATE_PYTHON = "C:/Users/Adam/AppData/Local/R/cache/R/reticulate/uv/cache/archive-v0/EiTNi4omakhlev5ckz2WP/Scripts/python.exe")
reticulate::repl_python()
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
library(readr)
library(dplyr)
library(here)
# Read CSV file
edubase_schools <- read_csv("https://www.dropbox.com/scl/fi/fhzafgt27v30lmmuo084y/edubasealldata20241003.csv?rlkey=uorw43s44hnw5k9js3z0ksuuq&raw=1") %>%
clean_names() %>%
mutate(urn = as.character(urn))
#str(r_edubase_schools)
# Define base path and common NA values - NOTE YOU WILL NEED TO DOWNLOAD THIS DATA AND PUT INTO YOUR OWN base_path LOCATION ON YOUR MACHINE
base_path <- here("sessions", "L6_data", "Performancetables_130242", "2022-2023")
na_common <- c("", "NA", "SUPP", "NP", "NE")
na_extended <- c(na_common, "SP", "SN")
na_attainment <- c(na_extended, "LOWCOV", "NEW")
na_mats <- c(na_common, "SUPPMAT")
# Absence data
england_abs <- read_csv(file.path(base_path, "england_abs.csv"), na = na_common) |>
mutate(URN = as.character(URN))
# Other School Census data
england_census <- read_csv(file.path(base_path, "england_census.csv"), na = na_common) |>
mutate(URN = as.character(URN)) |>
mutate(across(5:23, ~ parse_number(as.character(.))))
# KS4 MATs performance data
#First read
england_ks4_mats_performance <- read_csv(
file.path(base_path, "england_ks4-mats-performance.csv"),
na = na_mats
) |>
mutate(
TRUST_UID = as.character(TRUST_UID),
P8_BANDING = as.character(P8_BANDING),
INSTITUTIONS_INMAT = as.character(INSTITUTIONS_INMAT)
)
# Then Identify columns to convert (excluding character columns)
cols_to_convert <- england_ks4_mats_performance |>
select(-(1:10), -P8_BANDING, -INSTITUTIONS_INMAT) |>
names()
# Then apply parse_number safely to convert characters to numbers
england_ks4_mats_performance <- england_ks4_mats_performance |>
mutate(across(all_of(cols_to_convert), ~ parse_number(as.character(.))))
# KS4 pupil destination data
england_ks4_pupdest <- read_csv(file.path(base_path, "england_ks4-pupdest.csv"), na = na_extended) |>
mutate(URN = as.character(URN)) |>
mutate(across(8:82, ~ parse_number(as.character(.))))
# KS4 final attainment data
england_ks4final <- read_csv(file.path(base_path, "england_ks4final.csv"), na = na_attainment) |>
mutate(URN = as.character(URN)) |>
mutate(across(TOTPUPS:PTOTENT_E_COVID_IMPACTED_PTQ_EE, ~ parse_number(as.character(.))))
# School information data
england_school_information <- read_csv(
file.path(base_path, "england_school_information.csv"),
na = na_extended,
col_types = cols(
URN = col_character(),
OFSTEDLASTINSP = col_date(format = "%d-%m-%Y")
)
)
reticulate::repl_python()
#| warning: false
# Left join england_ks4final with england_abs
england_school_2022_23 <- england_ks4final %>%
left_join(england_abs, by = "URN") %>%
left_join(england_census, by = "URN") %>%
left_join(england_school_information, by = "URN") %>%
left_join(edubase_schools, by = c("URN" = "urn"))
View(england_school_2022_23)
reticulate::repl_python()
View(england_school_2022_23)
str(england_school_2022_23)
# Filter data
england_filtered <- england_school_2022_23 %>%
filter(!MINORGROUP %in% c("Special school", "Independent school", "College", NA)) %>%
filter(phase_of_education_name == "Secondary") %>%
filter(establishment_status_name == "Open") %>%
select(URN, SCHNAME.x, TOWN.x, TOTPUPS, ATT8SCR, OFSTEDRATING, MINORGROUP, PTFSM6CLA1A)
View(england_filtered)
#| include: false
# Filter data
england_filtered <- england_school_2022_23 %>%
filter(!MINORGROUP %in% c("Special school", "Independent school", "College", NA)) %>%
filter(phase_of_education_name == "Secondary") %>%
filter(establishment_status_name == "Open") %>%
select(URN, SCHNAME.x, LEA, LANAME, TOWN.x,gor_name, TOTPUPS, ATT8SCR, ATT8SCRENG, ATT8SCRMAT,ATT8SCRMAT,ATT8SCR_FSM6CLA1A,ATT8SCR_FSM6CLA1A,ATT8SCR_NFSM6CLA1A,ATT8SCR_BOYS,ATT8SCR_GIRLS,P8MEA,P8MEA_FSM6CLA1A,P8MEA_NFSM6CLA1A,PTFSM6CLA1A,PTNOTFSM6CLA1A,PNUMEAL,PNUMENGFL,PTPRIORLO,PTPRIORHI,NORB,NORG,PNUMFSMEVER,PERCTOT,PPERSABS10,SCHOOLTYPE,RELCHAR,ADMPOL,gender_name,OFSTEDRATING, MINORGROUP)
#| warning: false
# Left join england_ks4final with england_abs
england_school_2022_23 <- england_ks4final %>%
left_join(england_abs, by = "URN") %>%
left_join(england_census, by = "URN") %>%
left_join(england_school_information, by = "URN") %>%
left_join(edubase_schools, by = c("URN" = "urn"))
#| include: false
# Filter data
england_filtered <- england_school_2022_23 %>%
filter(!MINORGROUP %in% c("Special school", "Independent school", "College", NA)) %>%
filter(phase_of_education_name == "Secondary") %>%
filter(establishment_status_name == "Open") %>%
select(URN, SCHNAME.x, LEA, LANAME, TOWN.x,gor_name, TOTPUPS, ATT8SCR, ATT8SCRENG, ATT8SCRMAT,ATT8SCRMAT,ATT8SCR_FSM6CLA1A,ATT8SCR_FSM6CLA1A,ATT8SCR_NFSM6CLA1A,ATT8SCR_BOYS,ATT8SCR_GIRLS,P8MEA,P8MEA_FSM6CLA1A,P8MEA_NFSM6CLA1A,PTFSM6CLA1A,PTNOTFSM6CLA1A,PNUMEAL,PNUMENGFL,PTPRIORLO,PTPRIORHI,NORB,NORG,PNUMFSMEVER,PERCTOT,PPERSABS10,SCHOOLTYPE,RELCHAR,ADMPOL,gender_name,OFSTEDRATING, MINORGROUP)
View(england_school_information)
reticulate::repl_python()
#| include: false
# Filter data
england_filtered <- england_school_2022_23 %>%
filter(!MINORGROUP %in% c("Special school", "Independent school", "College", NA)) %>%
filter(phase_of_education_name == "Secondary") %>%
filter(establishment_status_name == "Open") %>%
select(URN, SCHNAME.x, LEA, LANAME, TOWN.x,gor_name, TOTPUPS, ATT8SCR, ATT8SCRENG, ATT8SCRMAT,ATT8SCRMAT,ATT8SCR_FSM6CLA1A,ATT8SCR_FSM6CLA1A,ATT8SCR_NFSM6CLA1A,ATT8SCR_BOYS,ATT8SCR_GIRLS,P8MEA,P8MEA_FSM6CLA1A,P8MEA_NFSM6CLA1A,PTFSM6CLA1A,PTNOTFSM6CLA1A,PNUMEAL,PNUMENGFL,PTPRIORLO,PTPRIORHI,NORB,NORG,PNUMFSMEVER,PERCTOT,PPERSABS10,SCHOOLTYPE.x,RELCHAR,ADMPOL,gender_name,OFSTEDRATING, MINORGROUP)
#| include: false
# Filter data
england_filtered <- england_school_2022_23 %>%
filter(!MINORGROUP %in% c("Special school", "Independent school", "College", NA)) %>%
filter(phase_of_education_name == "Secondary") %>%
filter(establishment_status_name == "Open") %>%
select(URN, SCHNAME.x, LEA, LANAME, TOWN.x,gor_name, TOTPUPS, ATT8SCR, ATT8SCRENG, ATT8SCRMAT,ATT8SCRMAT,ATT8SCR_FSM6CLA1A,ATT8SCR_FSM6CLA1A,ATT8SCR_NFSM6CLA1A,ATT8SCR_BOYS,ATT8SCR_GIRLS,P8MEA,P8MEA_FSM6CLA1A,P8MEA_NFSM6CLA1A,PTFSM6CLA1A,PTNOTFSM6CLA1A,PNUMEAL,PNUMENGFL,PTPRIORLO,PTPRIORHI,NORB,NORG,PNUMFSMEVER,PERCTOT,PPERSABS10,SCHOOLTYPE.x,RELCHAR,ADMPOL.x,gender_name,OFSTEDRATING, MINORGROUP)
View(england_filtered)
#| include: false
# Filter data
england_filtered <- england_school_2022_23 %>%
filter(!MINORGROUP %in% c("Special school", "Independent school", "College", NA)) %>%
filter(phase_of_education_name == "Secondary") %>%
filter(establishment_status_name == "Open") %>%
select(URN, SCHNAME.x, LEA, LANAME, TOWN.x,gor_name, TOTPUPS, ATT8SCR, ATT8SCRENG, ATT8SCRMAT,ATT8SCRMAT,ATT8SCR_FSM6CLA1A,ATT8SCR_FSM6CLA1A,ATT8SCR_NFSM6CLA1A,ATT8SCR_BOYS,ATT8SCR_GIRLS,P8MEA,P8MEA_FSM6CLA1A,P8MEA_NFSM6CLA1A,PTFSM6CLA1A,PTNOTFSM6CLA1A,PNUMEAL,PNUMENGFL,PTPRIORLO,PTPRIORHI,NORB,NORG,PNUMFSMEVER,PERCTOT,PPERSABS10,SCHOOLTYPE.x,RELCHAR,ADMPOL.y,gender_name,OFSTEDRATING, MINORGROUP)
reticulate::repl_python()
# Filter data
england_filtered <- england_school_2022_23 %>%
filter(!MINORGROUP %in% c("Special school", "Independent school", "College", NA)) %>%
filter(phase_of_education_name == "Secondary") %>%
filter(establishment_status_name == "Open") %>%
select(URN, SCHNAME.x, TOWN.x, TOTPUPS, ATT8SCR, OFSTEDRATING, MINORGROUP, PTFSM6CLA1A)
#| include: false
# Filter data
england_filtered <- england_school_2022_23 %>%
filter(!MINORGROUP %in% c("Special school", "Independent school", "College", NA)) %>%
filter(phase_of_education_name == "Secondary") %>%
filter(establishment_status_name == "Open") %>%
select(URN, SCHNAME.x, LEA, LANAME, TOWN.x,gor_name, TOTPUPS, ATT8SCR, ATT8SCRENG, ATT8SCRMAT,ATT8SCRMAT,ATT8SCR_FSM6CLA1A,ATT8SCR_FSM6CLA1A,ATT8SCR_NFSM6CLA1A,ATT8SCR_BOYS,ATT8SCR_GIRLS,P8MEA,P8MEA_FSM6CLA1A,P8MEA_NFSM6CLA1A,PTFSM6CLA1A,PTNOTFSM6CLA1A,PNUMEAL,PNUMENGFL,PTPRIORLO,PTPRIORHI,NORB,NORG,PNUMFSMEVER,PERCTOT,PPERSABS10,SCHOOLTYPE.x,RELCHAR,ADMPOL.y,gender_name,OFSTEDRATING, MINORGROUP)
ggplot(england_school_2022_23, aes(x = ATT8SCR, y = "")) +
geom_boxplot(fill = "#EDD971", alpha = 0.1, outlier.shape = NA) +
geom_jitter(aes(colour = MINORGROUP), height = 0.2, alpha = 0.8, size = 1) +
scale_colour_casa() +  # applies the default casaviz discrete palette
labs(
title = "Attainment 8 - All Schools 2022/23 Academic Year",
x = "Attainment 8 Score",
y = NULL,
colour = "School Type"
) +
theme_minimal() +
theme(
legend.position = "bottom",
legend.key.size = unit(10, "mm"),   # increase dot space
legend.text = element_text(size = 10)  # optional: larger legend labels
) + guides(colour = guide_legend(override.aes = list(size = 4)))
ggplot(england_school_2022_23, aes(x = ATT8SCR, y = "")) +
geom_boxplot(fill = "#EDD971", alpha = 0.1, outlier.shape = NA) +
geom_jitter(aes(colour = MINORGROUP), height = 0.2, alpha = 0.8, size = 1) +
scale_colour_viridis_b() +  # applies the default casaviz discrete palette
labs(
title = "Attainment 8 - All Schools 2022/23 Academic Year",
x = "Attainment 8 Score",
y = NULL,
colour = "School Type"
) +
theme_minimal() +
theme(
legend.position = "bottom",
legend.key.size = unit(10, "mm"),   # increase dot space
legend.text = element_text(size = 10)  # optional: larger legend labels
) + guides(colour = guide_legend(override.aes = list(size = 4)))
ggplot(england_school_2022_23, aes(x = ATT8SCR, y = "")) +
geom_boxplot(fill = "#EDD971", alpha = 0.1, outlier.shape = NA) +
geom_jitter(aes(colour = MINORGROUP), height = 0.2, alpha = 0.8, size = 1) +
scale_colour_viridis_c() +  # applies the default casaviz discrete palette
labs(
title = "Attainment 8 - All Schools 2022/23 Academic Year",
x = "Attainment 8 Score",
y = NULL,
colour = "School Type"
) +
theme_minimal() +
theme(
legend.position = "bottom",
legend.key.size = unit(10, "mm"),   # increase dot space
legend.text = element_text(size = 10)  # optional: larger legend labels
) + guides(colour = guide_legend(override.aes = list(size = 4)))
ggplot(england_school_2022_23, aes(x = ATT8SCR, y = "")) +
geom_boxplot(fill = "#EDD971", alpha = 0.1, outlier.shape = NA) +
geom_jitter(aes(colour = MINORGROUP), height = 0.2, alpha = 0.8, size = 1) +
scale_colour_viridis_d() +  # applies the default casaviz discrete palette
labs(
title = "Attainment 8 - All Schools 2022/23 Academic Year",
x = "Attainment 8 Score",
y = NULL,
colour = "School Type"
) +
theme_minimal() +
theme(
legend.position = "bottom",
legend.key.size = unit(10, "mm"),   # increase dot space
legend.text = element_text(size = 10)  # optional: larger legend labels
) + guides(colour = guide_legend(override.aes = list(size = 4)))
# reticulate::py_require("pyyaml")
# reticulate::py_require("jupyter")
# reticulate::py_require("statsmodels")
# reticulate::py_require("pandas")
# reticulate::py_require("numpy")
# reticulate::py_require("pyjanitor")
# reticulate::py_require("pathlib")
# reticulate::py_require("matplotlib")
reticulate::py_require("seaborn")
reticulate::repl_python()
